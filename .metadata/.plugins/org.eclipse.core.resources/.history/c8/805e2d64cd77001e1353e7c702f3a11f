package com.mgsystems.listaligada;

public class ListaLigada<T> {

	private Elemento<T> primeiro;
	private Elemento<T> ultimo;
	private int tamanho;
	
	public ListaLigada() {
		this.tamanho = 0;
	}

	public Elemento<T> getPrimeiro() {
		return primeiro;
	}

	public void setPrimeiro(Elemento<T> primeiro) {
		this.primeiro = primeiro;
	}

	public Elemento<T> getUltimo() {
		return ultimo;
	}

	public void setUltimo(Elemento<T> ultimo) {
		this.ultimo = ultimo;
	}

	public int getTamanho() {
		return tamanho;
	}

	public void setTamanho(int tamanho) {
		this.tamanho = tamanho;
	}
	
	public void adicionar(T valor) {
		
		Elemento<T> novoElemento= new Elemento<T>(valor);
		
		if(primeiro == null && ultimo==null) {
			primeiro = novoElemento;
			ultimo = novoElemento;
		}
		else {
			ultimo.setProximo(novoElemento);
			ultimo= novoElemento;
		}
		
		tamanho++;
		
	}
	
	public void iserir(T valor, int posicao) {
		
		Elemento<T> anterior = null;
		Elemento<T> atual = primeiro;
		Elemento<T> novoElemento= new Elemento<T>(valor);
		
		if(tamanho > 0 && tamanho >= posicao) {
			
			for(int i=0; i <= posicao; i++) {
				
					if(tamanho == 1) {
						ultimo.setProximo(novoElemento);
						ultimo= novoElemento;
					}
					
					else if(atual == primeiro) {
						
						primeiro = atual.getProximo();
						atual.setProximo(null);
						
					}
					
					else if(atual == ultimo) {
						ultimo = anterior;
						anterior.setProximo(null);
					}
					else {
						anterior.setProximo(atual.getProximo());
						atual = null;
					}
					
					tamanho--;
					break;
					
				
				
					anterior = atual;
					atual= atual.getProximo();
				
			}
			
		}
		

		
	}
	
	public Elemento<T> remover(T valor) {
		
		Elemento<T> anterior = null;
		Elemento<T> atual = primeiro;
		Elemento<T> elementoRetorno= null;
		
		for(int i=0; i< tamanho; i++) {
			
			if(atual.getValor().equals(valor)) {
				elementoRetorno = atual;
				
				if(tamanho == 1) {
					primeiro = null;
					ultimo = null;
				}
				
				else if(atual == primeiro) {
					
					primeiro = atual.getProximo();
					atual.setProximo(null);
					
				}
				
				else if(atual == ultimo) {
					ultimo = anterior;
					anterior.setProximo(null);
				}
				else {
					anterior.setProximo(atual.getProximo());
					atual = null;
				}
				
				tamanho--;
				break;
				
			}
			
			anterior = atual;
			atual= atual.getProximo();
			
		}
		
		return elementoRetorno;
		
	}
	
	public Elemento<T> get(int posicao) {
		
		Elemento<T> atual = primeiro;
		
		for(int i=0; i < posicao; i++) {
			
			if(atual.getProximo() != null) {
				atual = atual.getProximo();
			}
			
		}
		
		return atual;
		
	}
	
	public IteratorListaLigada<T> getIteraor(){
		
		return new IteratorListaLigada<T>(primeiro);
		
	}
	
	
	
	public String imprimeLista(IteratorListaLigada<T> iterator) {
		
		StringBuilder builder= new StringBuilder();
		
		if(primeiro != null) {
			
			builder.append("["+primeiro.getValor());
				
			while(iterator.temProximo()) {
				builder.append(","+iterator.getProximo().getValor());
			}
			
			builder.append("]");
			
		}
		else {
			builder.append("[]");
		}
		
		return builder.toString();
	}
	
}
